{"version":3,"sources":["service/ItemDataService.jsx","component/ListItems.jsx","component/Item.jsx","service/CategoryDataService.jsx","component/ListCategories.jsx","component/Category.jsx","component/NewCategory.jsx","component/GroceryHelperApp.jsx","App.js","serviceWorker.js","index.js"],"names":["ALL_ITEMS_API_URL","concat","service_ItemDataService","axios","get","id","delete","item","put","newItemName","post","params","ListItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","message","refreshGroceryItems","bind","assertThisInitialized","deleteGroceryItemClicked","updateGroceryItemClicked","addGroceryItemClicked","refreshGroceryCategories","_this2","ItemDataService","retrieveAllGroceryItems","then","response","console","log","setState","data","name","history","push","_this3","deleteGroceryItem","_this4","react_default","a","createElement","className","map","key","itemId","itemName","itemCategory","categoryName","onClick","Component","Item","handleChange","event","defineProperty","target","value","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","newItem","wrap","_context","prev","next","preventDefault","length","alert","abrupt","categoryId","createItem","updateItem","stop","_x","apply","arguments","match","isUpdateExistingItem","validateForm","retrieveSpecificGroceryItem","createGroceryItem","updateGroceryItem","_this5","formik_esm","initialValues","category","onSubmit","validateOnChange","validateOnBlur","validate","enableReinitialize","type","disabled","autoFocus","onChange","ALL_CATEGORIES_API_URL","ALL_ITEMS_UNDER_CATEGORY_API_URL","CategoryDataService","ListCategories","categories","addGroceryCategoryClicked","listItemsUnderCategory","backToItems","retrieveAllGroceryCategories","uri","Category","backToCategories","retrieveSpecificGroceryCategory","retrieveItemsUnderGroceryCategory","NewCategory","createCategory","newCategory","createGroceryCategory","GroceryHelperApp","react_router_dom","react_router","path","exact","component","App","component_GroceryHelperApp","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbe345fd.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst GROCERY_API_URL = 'http://localhost:8080';\nconst ITEM_URI = 'grocery/item';\nconst ALL_ITEMS_API_URL = `${GROCERY_API_URL}/${ITEM_URI}`;\n\nclass ItemDataService {\n\n    retrieveAllGroceryItems() {\n        return axios.get(`${ALL_ITEMS_API_URL}`);\n    }\n\n    retrieveSpecificGroceryItem(id) {\n        return axios.get(`${ALL_ITEMS_API_URL}/${id}`);\n    }\n\n    deleteGroceryItem(id) {\n        return axios.delete(`${ALL_ITEMS_API_URL}/${id}`);\n    }\n\n    createGroceryItem(item) {\n        return axios.put(`${ALL_ITEMS_API_URL}`, item);\n    }\n\n    updateGroceryItem(id, newItemName) {\n        return axios.post(`${ALL_ITEMS_API_URL}/${id}`, null, {\n            params: {\n                newItemName: newItemName\n            }\n        });\n    }\n}\n\nexport default new ItemDataService()","import React, { Component } from 'react';\nimport './ListItems.css';\nimport ItemDataService from '../service/ItemDataService';\n\nclass ListItems extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            message: null\n        };\n        this.refreshGroceryItems = this.refreshGroceryItems.bind(this);\n        this.deleteGroceryItemClicked = this.deleteGroceryItemClicked.bind(this);\n        this.updateGroceryItemClicked = this.updateGroceryItemClicked.bind(this);\n        this.addGroceryItemClicked = this.addGroceryItemClicked.bind(this);\n        this.refreshGroceryCategories = this.refreshGroceryCategories.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshGroceryItems();\n    }\n\n    refreshGroceryItems() {\n        ItemDataService.retrieveAllGroceryItems()\n            .then(\n                response => {\n                    console.log(response);\n                    this.setState({items: response.data});\n                }\n            );\n    }\n\n    updateGroceryItemClicked(id, name) {\n        console.log('Update: ' + id + ' - ' + name);\n        this.props.history.push(`/item/${id}`);\n    }\n\n    deleteGroceryItemClicked(id, name) {\n        ItemDataService.deleteGroceryItem(id)\n            .then(\n                response => {\n                    console.log(response);\n                    this.setState({ message: `Grocery Item \"${name}\" successfully deleted` });\n                    this.refreshGroceryItems()\n                }\n            )\n    }\n\n    addGroceryItemClicked() {\n        this.props.history.push(`/item/-1`);\n    }\n\n    refreshGroceryCategories() {\n        this.props.history.push(`/category`);\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3 className=\"header\">All Grocery Items</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Grocery Item</th>\n                        <th>Category</th>\n                        <th>Update</th>\n                        <th>Delete</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.items.map(\n                                item =>\n                                    <tr key={item.itemId}>\n                                        <td>{item.itemId}</td>\n                                        <td>{item.itemName}</td>\n                                        <td>{item.itemCategory.categoryName}</td>\n                                        <td>\n                                            <button className=\"btn btn-success\"\n                                                    onClick={() => this.updateGroceryItemClicked(item.itemId, item.itemName)}>\n                                                Update\n                                            </button>\n                                        </td>\n                                        <td>\n                                            <button className=\"btn btn-warning\"\n                                                    onClick={() => this.deleteGroceryItemClicked(item.itemId, item.itemName)}>\n                                                Delete\n                                            </button>\n                                        </td>\n                                    </tr>\n                            )\n                        }\n                    </tbody>\n                </table>\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.addGroceryItemClicked}>\n                        Add a Grocery Item\n                    </button>\n                </div>\n\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.refreshGroceryCategories}>\n                        View All Categories\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListItems","import React, { Component } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport ItemDataService from '../service/ItemDataService';\n\nclass Item extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            itemId: this.props.match.params.id,\n            itemName: '',\n            categoryId: '',\n            categoryName: '',\n            isUpdateExistingItem: null\n        };\n\n        this.validateForm = this.validateForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.createItem = this.createItem.bind(this);\n        this.updateItem = this.updateItem.bind(this);\n    }\n\n    componentDidMount() {\n\n        // eslint-disable-next-line\n        if (this.state.itemId == -1) {\n            this.setState({\n                isUpdateExistingItem: false\n            });\n            return;\n        } else {\n            this.setState({\n                isUpdateExistingItem: true\n            });\n            ItemDataService.retrieveSpecificGroceryItem(this.state.itemId)\n                .then(response => this.setState({\n                    itemName: response.data.itemName,\n                    categoryId: response.data.itemCategory.categoryId,\n                    categoryName: response.data.itemCategory.categoryName\n                }))\n        }\n    }\n\n    validateForm() {\n        return this.state.itemName.length > 0\n            && this.state.categoryName.length > 0\n            && this.state.categoryId.length > 0;\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    };\n\n    handleSubmit = async event => {\n\n        event.preventDefault();\n        if(this.state.itemName.length <= 0) {\n            alert(`Item Name can't be empty. Please enter a name`);\n            return;\n        }\n\n        if(this.state.categoryName.length <= 0) {\n            alert(`Category name can't be empty. Please enter a name`);\n            return;\n        }\n\n        if(this.state.categoryId.length <= 0) {\n            alert(`Category ID can't be empty. Please enter  valid ID`);\n            return;\n        }\n\n        // eslint-disable-next-line\n        if (this.state.itemId == -1) {\n            let newItem = {\n                itemName: this.state.itemName,\n                itemCategory: {\n                    categoryId: this.state.categoryId,\n                    categoryName: this.state.categoryName\n                }\n            };\n            this.createItem(newItem);\n        } else {\n            this.updateItem(this.state.itemId, this.state.itemName);\n        }\n    };\n\n    createItem(item) {\n        ItemDataService.createGroceryItem(item)\n            .then(() => this.props.history.push('/item'))\n    }\n\n    updateItem(id, itemName) {\n        ItemDataService.updateGroceryItem(id, itemName)\n            .then(() => this.props.history.push('/item'))\n    }\n    \n    render() {\n        let itemId = this.state.itemId || '';\n\n        // eslint-disable-next-line\n        if (itemId == -1) {\n            itemId = '';\n        }\n        let itemName = this.state.itemName || '';\n        let categoryId = this.state.categoryId || '';\n        let categoryName = this.state.categoryName || '';\n\n        return (\n            <div>\n                <h3>Grocery Item</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{\n                            item: [itemId, itemName],\n                            category: [categoryId, categoryName]\n                        }}\n                        onSubmit={this.handleSubmit}\n                        validateOnChange={this.handleChange}\n                        validateOnBlur={false}\n                        validate={this.validateForm}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form onSubmit={this.handleSubmit}>\n                                    <fieldset className=\"form-group\">\n                                        <label>Id</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"item[0]\" disabled />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Grocery Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"item[1]\" autoFocus\n                                               id=\"itemName\"\n                                               onChange={this.handleChange}\n                                               value={this.state.itemName}\n                                        />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Category</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"category[1]\"\n                                               id=\"categoryName\"\n                                               disabled={this.state.isUpdateExistingItem}\n                                               onChange={this.handleChange}\n                                               value={this.state.categoryName}\n                                        />\n                                    </fieldset>\n                                    <fieldset className=\"form-group\">\n                                        <label>Category ID</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"category[0]\"\n                                               id=\"categoryId\"\n                                               disabled={this.state.isUpdateExistingItem}\n                                               onChange={this.handleChange}\n                                               value={this.state.categoryId}\n                                        />\n                                    </fieldset>\n                                    <button className=\"btn btn-success btn-one\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Item","import axios from \"axios\";\n\nconst GROCERY_API_URL = 'http://localhost:8080';\nconst CATEGORY_URI = 'grocery/category';\nconst ITEMS_UNDER_CATEGORY_URI = '/grocery/category/items';\nconst ALL_CATEGORIES_API_URL = `${GROCERY_API_URL}/${CATEGORY_URI}`;\nconst ALL_ITEMS_UNDER_CATEGORY_API_URL = `${GROCERY_API_URL}/${ITEMS_UNDER_CATEGORY_URI}`;\n\nclass ItemDataService {\n\n    retrieveAllGroceryCategories() {\n        return axios.get(`${ALL_CATEGORIES_API_URL}`);\n    }\n\n    retrieveSpecificGroceryCategory(id) {\n        return axios.get(`${ALL_CATEGORIES_API_URL}/${id}`);\n    }\n\n    createGroceryCategory(category) {\n        return axios.put(`${ALL_CATEGORIES_API_URL}`, category);\n    }\n\n    retrieveItemsUnderGroceryCategory(id) {\n        return axios.get(`${ALL_ITEMS_UNDER_CATEGORY_API_URL}`, {\n            params: {\n                categoryId: id\n            }\n        });\n    }\n}\n\nexport default new ItemDataService()","import React, { Component } from 'react';\nimport './ListCategories.css';\nimport CategoryDataService from '../service/CategoryDataService';\n\nclass ListCategories extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            categories: [],\n            message: null\n        };\n        this.refreshGroceryCategories = this.refreshGroceryCategories.bind(this);\n        this.addGroceryCategoryClicked = this.addGroceryCategoryClicked.bind(this);\n        this.listItemsUnderCategory = this.listItemsUnderCategory.bind(this);\n        this.backToItems = this.backToItems.bind(this);\n    }\n\n    componentDidMount() {\n        this.refreshGroceryCategories();\n    }\n\n    refreshGroceryCategories() {\n        CategoryDataService.retrieveAllGroceryCategories()\n            .then(\n                response => {\n                    console.log(response);\n                    this.setState({categories: response.data});\n                }\n            );\n    }\n\n    addGroceryCategoryClicked() {\n        this.props.history.push(`/category/new/-1`)\n    }\n\n    listItemsUnderCategory(id) {\n        const uri = `/category/${id}`;\n        this.props.history.push(uri);\n    }\n\n    backToItems () {\n        this.props.history.push('/item');\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3 className=\"header\">All Grocery Categories</h3>\n                {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Grocery Category</th>\n                        <th>Category Items</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.state.categories.map(\n                            category =>\n                                <tr key={category.categoryId}>\n                                    <td>{category.categoryId}</td>\n                                    <td>{category.categoryName}</td>\n                                    <td>\n                                        <button className=\"btn btn-success btn-two\"\n                                                onClick={() => this.listItemsUnderCategory(category.categoryId)}>\n                                            View Items under {category.categoryName}\n                                        </button>\n                                    </td>\n                                </tr>\n                        )\n                    }\n                    </tbody>\n                </table>\n\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.addGroceryCategoryClicked}>\n                        Add a Grocery Category\n                    </button>\n                </div>\n\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.backToItems}>\n                        Back to Home\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListCategories","import React, {Component} from \"react\";\nimport CategoryDataService from \"../service/CategoryDataService\";\n\nclass Category extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            categoryId: this.props.match.params.id,\n            categoryName: '',\n            items: []\n        };\n\n        this.backToCategories = this.backToCategories.bind(this);\n        this.backToItems = this.backToItems.bind(this);\n    }\n\n    componentDidMount() {\n\n        CategoryDataService.retrieveSpecificGroceryCategory(this.state.categoryId)\n            .then(response => this.setState({\n                categoryId: response.data.categoryId,\n                categoryName: response.data.categoryName\n            }));\n\n        CategoryDataService.retrieveItemsUnderGroceryCategory(this.state.categoryId)\n            .then(response => this.setState({\n                items: response.data\n            }))\n    }\n\n    backToCategories() {\n        this.props.history.push('/category');\n    }\n\n    backToItems() {\n        this.props.history.push('/item');\n    }\n\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h3 className=\"header\">All groceries under \"{this.state.categoryName}\"</h3>\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>Grocery ID</th>\n                        <th>Grocery Item</th>\n                        <th>Category</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {\n                        this.state.items.map(\n                            item =>\n                                <tr key={item.itemId}>\n                                    <td>{item.itemId}</td>\n                                    <td>{item.itemName}</td>\n                                    <td>{item.itemCategory.categoryName}</td>\n                                </tr>\n                        )\n                    }\n                    </tbody>\n                </table>\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.backToCategories}>\n                        Back to Categories\n                    </button>\n                </div>\n\n                <div className=\"row row1\">\n                    <button className=\"btn btn-success btn-one\"\n                            onClick={this.backToItems}>\n                        Back to Home\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Category","import React, { Component } from 'react'\nimport { Formik, Form, Field } from 'formik';\nimport CategoryDataService from '../service/CategoryDataService';\n\nclass NewCategory extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            categoryName: ''\n        };\n        this.validateForm = this.validateForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.createCategory = this.createCategory.bind(this);\n    }\n\n    createCategory(categoryName) {\n\n        let newCategory = {\n            categoryName: categoryName\n        };\n        CategoryDataService.createGroceryCategory(newCategory)\n            .then(() => this.props.history.push('/category'))\n    }\n\n    validateForm() {\n        return this.state.categoryName.length > 0;\n    }\n\n    handleChange = event => {\n        this.setState({\n            [event.target.id]: event.target.value\n        });\n    };\n\n    handleSubmit = async event => {\n\n        event.preventDefault();\n\n        if(this.state.categoryName.length <= 0) {\n            alert(`Category name can't be empty. Please enter a name`);\n            return;\n        }\n\n        this.createCategory(this.state.categoryName);\n    };\n\n    render() {\n        let categoryName = this.state.categoryName || '';\n        return (\n            <div>\n                <h3>Add a new Grocery Category</h3>\n                <div className=\"container\">\n                    <Formik\n                        initialValues={{\n                            category: [categoryName]\n                        }}\n                        onSubmit={this.handleSubmit}\n                        validateOnChange={this.handleChange}\n                        validateOnBlur={false}\n                        validate={this.validateForm}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form onSubmit={this.handleSubmit}>\n                                    <fieldset className=\"form-group\">\n                                        <label>Category Name</label>\n                                        <Field className=\"form-control\" type=\"text\" name=\"category[0]\"\n                                               id=\"categoryName\"\n                                               onChange={this.handleChange}\n                                               value={this.state.categoryName}\n                                        />\n                                    </fieldset>\n                                    <button className=\"btn btn-success btn-one\" type=\"submit\">Save</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NewCategory","import React, {Component} from \"react\";\nimport ListItems from \"./ListItems\";\nimport Item from \"./Item\";\nimport ListCategories from \"./ListCategories\";\nimport Category from \"./Category\";\nimport NewCategory from \"./NewCategory\";\nimport {Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\n\nclass GroceryHelperApp extends Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Switch>\n                        <Route path=\"/\" exact component={ListItems}/>\n                        <Route path=\"/item\" exact component={ListItems}/>\n                        <Route path=\"/item/:id\" exact component={Item}/>\n                        <Route path=\"/category\" exact component={ListCategories}/>\n                        <Route path=\"/category/:id\" exact component={Category}/>\n                        <Route path=\"/category/new/-1\" exact component={NewCategory}/>\n                    </Switch>\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default GroceryHelperApp\n","import React, { Component } from 'react';\nimport './App.css';\nimport GroceryHelperApp from \"./component/GroceryHelperApp\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"container\">\n                <GroceryHelperApp />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}